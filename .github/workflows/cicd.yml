name: Deploy to GCP VM
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'
          project_id: '${{ secrets.GCP_PROJECT_ID }}'
      
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Prepare deployment files
        run: |
          # Create a clean directory for deployment
          mkdir -p deploy-temp
          
          # Copy only necessary files (exclude common unwanted files)
          rsync -av --progress . deploy-temp/ \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            --exclude='coverage' \
            --exclude='dist' \
            --exclude='build' \
            --exclude='gha-creds-*.json'
          
          # Create archive from clean directory
          cd deploy-temp
          tar czf ../code.tar.gz .
          cd ..
      
      # SOLUTION 1: Use Cloud Storage (recommended - avoids SSH issues)
      - name: Deploy via Cloud Storage
        run: |
          # Upload to Cloud Storage bucket
          gsutil mb -p ${{ secrets.GCP_PROJECT_ID }} gs://${{ secrets.GCP_PROJECT_ID }}-deployments || true
          gsutil cp code.tar.gz gs://${{ secrets.GCP_PROJECT_ID }}-deployments/latest.tar.gz
          
          # Create deployment script
          cat > deploy-script.sh << 'EOF'
          #!/bin/bash
          echo "Starting deployment..."
          mkdir -p ~/test
          cd ~/test
          
          # Download latest code
          gsutil cp gs://PROJECT_ID-deployments/latest.tar.gz ./
          tar xzf latest.tar.gz
          rm latest.tar.gz
          
          # Your deployment commands here
          # Example for Node.js app:
          # npm install
          # pm2 restart app || pm2 start app.js --name app
          
          echo "Deployment completed at $(date)"
          EOF
          
          # Replace PROJECT_ID placeholder
          sed -i "s/PROJECT_ID/${{ secrets.GCP_PROJECT_ID }}/g" deploy-script.sh
          
          # Upload deployment script
          gsutil cp deploy-script.sh gs://${{ secrets.GCP_PROJECT_ID }}-deployments/
          
          # Execute deployment (this should work if VM has proper service account)
          gcloud compute ssh tanmaymi251@ubuntu-4gb \
            --zone=us-central1-c \
            --command="gsutil cp gs://${{ secrets.GCP_PROJECT_ID }}-deployments/deploy-script.sh ~/ && chmod +x ~/deploy-script.sh && ~/deploy-script.sh && rm ~/deploy-script.sh"
      
      # SOLUTION 2: Alternative SSH method (uncomment if you fix permissions)
      # - name: Deploy via SSH with explicit key setup
      #   run: |
      #     # Set up SSH directory and auto-accept prompts
      #     mkdir -p ~/.ssh
      #     echo "Host *" > ~/.ssh/config
      #     echo "  StrictHostKeyChecking no" >> ~/.ssh/config
      #     echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
      #     
      #     # Try SCP with force overwrite
      #     echo "yes" | gcloud compute scp code.tar.gz tanmaymi251@ubuntu-4gb:~/test/ \
      #       --zone=us-central1-c \
      #       --force-key-file-overwrite
      #     
      #     # Execute deployment
      #     gcloud compute ssh tanmaymi251@ubuntu-4gb \
      #       --zone=us-central1-c \
      #       --command="cd ~/test && tar xzf code.tar.gz && rm code.tar.gz"
      
      # Option 2: Alternative using Cloud Storage (uncomment if needed)
      # - name: Deploy via Cloud Storage alternative
      #   run: |
      #     # If the above doesn't work, you can also use instance startup scripts
      #     # or deploy via Cloud Build instead
      
      - name: Clean up
        run: |
          rm -rf deploy-temp code.tar.gz
